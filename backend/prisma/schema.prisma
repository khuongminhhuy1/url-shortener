// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model ShortURL {
  id         String @id @default(uuid()) 
  original   String
  shortCode  String @unique
  clicks     Int    @default(0)
  createdAt  DateTime @default(now())
  userId String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("short_urls")
}

model User {
  id        String   @id  @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken RefreshToken?
  verificationToken VerificationToken?
  short_urls ShortURL[]
  @@map("users")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  @@map("verification_tokens")
}

model RefreshToken {
  id         String   @id @default(uuid()) // Unique ID
  token      String   @unique              // The refresh token itself
  userId     String   @unique              // Link to User model
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime // Expiry date for the token
  createdAt  DateTime @default(now()) // When the token was created

  @@map("refresh_tokens")
}